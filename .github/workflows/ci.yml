# .github/workflows/ci.yml
name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci

  test:
    name: Run Jest & Generate Coverage
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - name: Run Jest with coverage
        run: npm test -- --coverage --watchAll=false
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  e2e:
    name: Run Cypress E2E Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Restore dependencies & Cypress cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install & start application
        shell: bash
        run: |
          npm ci
          npm run dev &
          npx wait-on http://localhost:5173
        env:
          CI: true
      - name: Run Cypress tests
        uses: cypress-io/github-action@v5
        with:
          browser: chrome
          record: false
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: cypress/videos
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - name: Upload Cypress JUnit results
        uses: actions/upload-artifact@v4
        with:
          name: cypress-junit
          path: cypress/results/*.xml
      - name: Generate Allure Report
        shell: bash
        run: |
          npx allure generate allure-results --clean -o allure-report
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0    # sin shallow clone para anÃ¡lisis completo
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=FrontProyecto
            -Dsonar.sources=src
            -Dsonar.tests=src/components/__tests__
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=cypress/**,allure-report/**

